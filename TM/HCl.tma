State Init {
  > Telemetry Start
  Validate Idle;
}

State Idle {
}

State Calibrate {
#   +3  > Select QCLI Waveform I_342_347
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop
#   +3  > Select QCLI Waveform I_344_346
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop

#   +3  > Select QCLI Waveform I_340_350
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop
#   +3  > Select QCLI Waveform I_342_347
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop
#   +3  > Select QCLI Waveform I_344_346
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop

        Validate RingDown_Survey;
}

State RingDown_Survey {
    +3  > Select QCLI Waveform RD_350_10MHz
    +2  > SSP Start
    +2  > QCLI Run
 +1:00  > SSP Stop
    +1  > QCLI Stop

    +3  > Select QCLI Waveform RD_320_50MHz
    +2  > SSP Start
    +2  > QCLI Run
 +1:00  > SSP Stop
    +1  > QCLI Stop

    +3  > Select QCLI Waveform RD_250_50MHz
    +2  > SSP Start
    +2  > QCLI Run
 +1:00  > SSP Stop
    +1  > QCLI Stop

        Validate Idle;
}

#----------------------------------------------
# States for testing pump temperatures
#----------------------------------------------
State PumpCycle {
  > Set Pumps Set Point 1.0
      +1 Hold until (SWStat == SWS_TIME_WARP) or 9:59;
      +1 > SWStat Set 30
      +1 Hold until (SWStat == SWS_TIME_WARP) or 59;
      +1 > SWStat Set 0
   Validate PumpCycleLoop;
}

State PumpCycleLoop {
  { if (Pump1_V_St == 0) Validate Idle; }
     +1 { ci_sendfcmd(0, "Set Pumps Set Point %.2lf\n",
            convert(Pump1_V_St)+0.25); }
     +1 Hold until (SWStat == SWS_TIME_WARP) or 9:59;
     +1 > SWStat Set 30
  +1:00 > SWStat Set 0
        Validate PumpCycleLoop;
}

Partition
#----------------------------------------------
# Pump Temperature Watchdog
#   Will shut off pumps if they exceed  max
#   temp limits
#----------------------------------------------
%{
  #define HEAD_MAX_T 80.0
  #define ELEC_MAX_T 58.0
%}

State Pump_Off {
      > Set Pumps Set Point 0
   +2 { if (Pump1_V_St > 0 || Pump2_V_St > 0)
          Validate Pump_On;
      }
}

State Pump_On NoLog {
    Hold until (convert(Pump1_Head_T) > HEAD_MAX_T ||
          convert(Pump2_Head_T) > HEAD_MAX_T ||
          convert(Pump1_mot_T) > ELEC_MAX_T ||
          convert(Pump2_mot_T) > ELEC_MAX_T);
    Hold until (convert(Pump1_Head_T) <= HEAD_MAX_T &&
          convert(Pump2_Head_T) <= HEAD_MAX_T &&
          convert(Pump1_mot_T) <= ELEC_MAX_T &&
          convert(Pump2_mot_T) <= ELEC_MAX_T)
          or 5
    else Validate Pump_Over_Temp;
    +1 Validate Pump_On;
}

State Pump_Over_Temp {
  Validate Pump_Off;
}

#----------------------------------------------
# Cell Pressure Control
#   Need:
#     Pressure setpoint: Torr 16-bit 0-278
#     Proportional gain: 
#     Integral gain:
#     PINCH_MAX_DRIVE 1150
#        From fully closed drive limit to fully open drive limit
#     PINCH_FULL_OPEN 300
#        From fully closed drive limit to maximum flow. This is PINCH_HIGH_LIMIT
#     PINCH_CLOSED_STEP 100
#        From fully closed until first flow [80-120 even]
#     PINCH_CLOSED_INIT 350
#        How far to drive to ensure hard stop
#     PINCH_LOW_LIMIT 40
#        Under normal operation, do not drive below here
#        If we get here and are still above pressure, reinit
#     Speed: 107 Hz
#----------------------------------------------
Partition
State Pinch_Idle {}

State Pinch_Init {
  > Preset Pinch Valve Position to 400
  > Drive Pinch Valve In 350
  Hold Until (PVStat & 0x8) or 1;
  Hold Until ((PVStat & 0x8) == 0) or 4;
  > Preset Pinch Valve Position to 0
  Validate Pinch_Valve_Close;
}

State Pinch_Valve_Close {
  > Drive Pinch Valve to 50
  Hold Until (PVStep == 50 && (PVStat & 0x8) == 0) or 4;
  Validate Pinch_Valve_Closed;
}

State Pinch_Valve_Closed {
  { if (Pset > 0) { Validate Pinch_Valve_Reg_Init; }}
}

%{
  double Iterm = 0;
%}

State Pinch_Valve_Reg_Init {
  { Iterm = 0; }
  Validate Pinch_Valve_Reg;
}

State Pinch_Valve_Reg {
  { if (Pset <= 0) { Validate Pinch_Valve_Close; } }
  { double err, Pterm, PVst;
    int PVsti;
    err = (convert(Cell_P) - Pset)/convert(Amb_P);
    Pterm = Pgain * err;
    Iterm += Igain * err;
    if (Iterm > 300-80) Iterm = 300-80;
    PVst = Pterm + Iterm + 80;
    if (PVst > 300) PVst = 300;
    if (PVst < 40) PVst = 40;
    PVsti = floor(PVst+0.5);
    if (PVsti != PVStep) {
      ci_sendfcmd(2, "Drive Pinch Valve to %d\n", PVsti);
    }
  }
}
