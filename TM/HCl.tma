# -----------------------------------------------------------------------------
# Partition 1: Main Line
# -----------------------------------------------------------------------------
State Init {
      > Telemetry Start
      > _Algo P1 1
  +3  > Cell Proportional Gain Set -200
      > Cell Integral Gain Set -300
      # 5 C
      > Set Cell Temperature Set Point 1
      > Set Inlet Temperature Set Point 1
      > Cell Pressure Set Point 40
      depending on (AT_FLOAT) { Validate Startup; }
      depending on (TERMINATE) { Validate Shutdown; }
}

State Startup {
  depending on (TERMINATE) { Validate Shutdown; }
      > _Algo P1 2
      # 50 C
      > Set Cell Temperature Set Point 2
      > Set Inlet Temperature Set Point 2
      > Pumps Set Point 4.5
      Hold until valid (Pinch_Valve_Reg);
      Validate Calibrate;
  +10 Validate QCL_SelectRingandRun;
  +30 Validate QCL_SelectICOSandRun;
      Validate Record;
}

State Record {
  depending on (TERMINATE) { Validate Record_End; }
      > _Algo P1 3
  +60 Validate Calibrate;
      Hold until valid (VALVEDOWN);
      Hold until valid (VALVEDOWNPAUSE);
      Validate Record;
}

State Record_End {
      > _Algo P1 4
      Validate QCL_SelectRingandRun;
  +30 Validate Shutdown;
}

State Shutdown {
    > _Algo P1 5
    Hold Until Valid (QCL_is_Shutdown) or 10;
    > Command Gas Deck Valve Off
 +2 > Command Cal Gas Valve Off
 +2 > Pumps Set Point 0
    Hold until valid (Pumps_Off) or 10;
    Hold until valid (Pinch_Valve_Opened) or 40;
 +4 > Quit
}

# -----------------------------------------------------------------------------
# Partition 2: Altitude
# -----------------------------------------------------------------------------
Partition

# This partition converts pressure (altitude) into states 
# (ON_GROUND, OFF_GROUND).
# The threshold pressures each have two values - one for 
# the flight up and the other for the flight down.
# This provides hysteresis and prevents bouncing.  
# We are effectively using two switches: 
# 	ON_GROUND and IN_AIR (BELOW CLOUDS = ABOVE CLOUDS)
# REF: 650 torr ~5000 ft

%{ /* Altitude definitions in ft */
    double A_ground_up = 6000.;
    double A_strat_up = 42000.;
    double A_trop_dn = 40000.;
    int using_swp = 0;
%}

State ON_GROUND {
  > _Algo P2 1
  { using_swp = 0; }
  { if (using_swp ||
        alt_ft > A_ground_up)
      Validate OFF_GROUND;
  }
}

State OFF_GROUND {
  > _Algo P2 2
  { if ((using_swp == SWS_TERMINATE) ||
        (!using_swp &&
          (climb_fps < -100.0))) {
      Validate TERMINATE;
    }
  }
  { if ((using_swp == SWS_STRATOSPHERE) ||
        (!using_swp &&
         alt_ft > A_strat_up)) {
      Validate STRATOSPHERE;
    }
  }
}

State STRATOSPHERE {
  > _Algo P2 3
  { if ((using_swp == SWS_TERMINATE) ||
        (!using_swp &&
          (alt_ft < A_trop_dn ||
           climb_fps < -100.0))) {
      Validate TERMINATE;
    }
  }
  { if ((using_swp == SWS_FLOAT) ||
        (!using_swp &&
         climb_fps < 1.0)) {
      Validate AT_FLOAT;
    }
  }
}

State AT_FLOAT {
  > _Algo P2 4
  { if ((using_swp == SWS_TERMINATE) ||
        (!using_swp &&
         alt_ft < A_trop_dn)) {
      Validate TERMINATE;
    }
  }
  { if ((using_swp == SWS_VALVEDOWN) ||
        (!using_swp &&
         climb_fps < -2.0)) {
      Validate VALVEDOWN;
    }
  }
}

State VALVEDOWN {
  > _Algo P2 5
  { if ((using_swp == SWS_TERMINATE) ||
        (!using_swp &&
         alt_ft < A_trop_dn)) {
      Validate TERMINATE;
    }
  }
  { if ((using_swp == SWS_VALVEDOWNPAUSE) ||
        (!using_swp &&
         climb_fps > -1.0)) {
      Validate VALVEDOWNPAUSE;
    }
  }
}

State VALVEDOWNPAUSE {
  > _Algo P2 6
  { if ((using_swp == SWS_TERMINATE) ||
        (!using_swp &&
         alt_ft < A_trop_dn)) {
      Validate TERMINATE;
    }
  }
  { if ((using_swp == SWS_VALVEDOWN) ||
        (!using_swp &&
         climb_fps < -2.0)) {
      Validate VALVEDOWN;
    }
  }
}

State TERMINATE {
  > _Algo P2 7
}

#----------------------------------------------
# Partition 3: Pumpkin Troll supervisor
#----------------------------------------------
Partition

%{
  #include <stdint.h>
  uint8_t Pump_Status = 0;
  uint8_t Pump1_Temp = 1;
  uint8_t Pump2_Temp = 1;
  double Pump1_SP_target = 0;
  double Pump2_SP_target = 0;
  
  #define PUMP_T_COLD 0
  #define PUMP_T_OK 1
  #define PUMP_T_WARM 2
  #define PUMP_T_HOT 3
  #define PUMP_T_WAY_HOT 4
  #define T_RISING 0
  #define T_FALLING 1
  
  #define PUMPS_ON 0x01
  #define PUMP1_OK_TO_RUN 0x02
  #define PUMP2_OK_TO_RUN 0x04
  #define PUMPS_OK_TO_RUN (PUMP1_OK_TO_RUN|PUMP2_OK_TO_RUN)
  #define PUMP_1_OFF 0x08
  #define PUMP_2_OFF 0x10
  
  #define PUMP_SP_STEP 1.00

  /* HeadTtransRising identifies temperatures that indicate a transition
     up to the next warmer Pump*_Temp region or down into the next lower
     region.
     HeadTtrans[PUMP_T_COLD][0] is the limit when temps are rising to
     transition from PUMP_T_COLD to PUMP_T_OK.
     HeadTtrans[PUMP_T_COLD][1] is the limit when temps are falling to
     transition from PUMP_T_OK down into PUMP_T_COLD
  */
  static double HeadTtrans[4][2] = {
    -15.0, -20.0, // Transitions between PUMP_T_COLD and PUMP_T_OK
     70.0,  65.0, // Transitions between PUMP_T_OK and PUMP_T_WARM
     77.0,  75.0, // Transitions between PUMP_T_WARM and PUMP_T_HOT
     80.0,  78.0  // Transitions between PUMP_T_HOT and PUMP_T_WAY_HOT
  };
  
  /* ElecTtrans identifies temperatures for the electronics temp */
  static double ElecTtrans[4][2] = {
    -15.0, -20.0, // Transitions between PUMP_T_COLD and PUMP_T_OK
     60.0,  55.0, // Transitions between PUMP_T_OK and PUMP_T_WARM
     67.0,  65.0, // Transitions between PUMP_T_WARM and PUMP_T_HOT
     70.0,  68.0  // Transitions between PUMP_T_HOT and PUMP_T_WAY_HOT
  };

  static double is_rising(double HeadT, double ElecT, int region) {
    return region < PUMP_T_WAY_HOT &&
      (HeadT > HeadTtrans[region][T_RISING] ||
       ElecT > ElecTtrans[region][T_RISING]);
  }

  static double is_falling(double HeadT, double ElecT, int region) {
    return region > PUMP_T_COLD &&
      (HeadT < HeadTtrans[region-1][T_FALLING] ||
       ElecT < ElecTtrans[region-1][T_FALLING]);
  }
  
%}

State Pumps_Off {
      { Pump_Status &= ~(PUMPS_ON|PUMP_1_OFF|PUMP_2_OFF); }
      > _Algo P3 1
      > Set Pump 1 Set Point 0
      > Set Pump 2 Set Point 0
      Hold until (PumpsSP > 0 &&
          (Pump_Status & PUMPS_OK_TO_RUN) != 0 &&
          Pump1_Temp < PUMP_T_WAY_HOT &&
          Pump2_Temp < PUMP_T_WAY_HOT);
      Validate Pumps_Start_Prep;
}

State Pumps_Start_Prep {
      > _Algo P3 2
      > Command Exhaust Valve Off
      # Pinch valve algo must key off this state to initialize control
      Hold until valid (Pinch_Valve_Opened) or 5;
      Validate Pumps_Start;
}

State Pumps_Start {
      { Pump_Status |= PUMPS_ON; }
      depending on (1 Hz) {
        if (PumpsSP == 0 ||
           (Pump_Status & PUMPS_OK_TO_RUN) == 0 ||
           Pump1_Temp == PUMP_T_WAY_HOT ||
           Pump2_Temp == PUMP_T_WAY_HOT) {
          Validate Pumps_Stop_Prep;
        }
      }
      > _Algo P3 3
      Hold until (RPM1 > 0 || RPM2 > 0);
      Hold until (RPM1 > 0 && RPM2 > 0) or 20;
   +2 > Command Exhaust Valve On
      Hold until (convert(Cell_P) < 3.0) or 10;
      Validate Pumps_Running;
}

State Pumps_Running {
      > _Algo P3 4
      depending on (1 Hz) {
        if (Pump1_Temp == PUMP_T_WAY_HOT ||
            Pump2_Temp == PUMP_T_WAY_HOT ||
            !(Pump_Status & PUMPS_OK_TO_RUN)) {
          Validate Pumps_Stop_Prep;
        } else if (!(Pump_Status & PUMP1_OK_TO_RUN) &&
                   !(Pump_Status & PUMP_1_OFF)) {
          Validate Pumps_P1_Off;
        } else if (!(Pump_Status & PUMP2_OK_TO_RUN) &&
                   !(Pump_Status & PUMP_2_OFF)) {
          Validate Pumps_P2_Off;
        }
      }
}

State Pumps_P1_Off {
  > _Algo P3 5
  > Set Pump 1 Set Point 0.5
  {
    Pump_Status |= PUMP_1_OFF;
    Validate Pumps_Running;
  }
}

State Pumps_P2_Off {
  > _Algo P3 6
  > Set Pump 2 Set Point 0.5
  {
    Pump_Status |= PUMP_2_OFF;
    Validate Pumps_Running;
  }
}

State Pumps_Stop_Prep {
      > _Algo P3 7
      > Command Exhaust Valve Off
   +2 Validate Pumps_Off;
}

#----------------------------------------------
# Partition 4: Pump 1 Temperature Monitor
#----------------------------------------------
Partition

State Pump1_Temp_Monitor NoLog {
      { if (is_rising(convert(Pump1_Head_t), convert(Pump1_mot_T),
                Pump1_Temp)) {
          Validate Pump1_Temp_Rising;
        } else if (is_falling(convert(Pump1_Head_t), convert(Pump1_mot_T),
                Pump1_Temp)) {
          Validate Pump1_Temp_Falling;
        }
      }
}

State Pump1_Temp_Rising NoLog {
      Hold until (!is_rising(convert(Pump1_Head_t),
        convert(Pump1_mot_T), Pump1_Temp))
        or 5
      else {
        ++Pump1_Temp;
      }
   +1 Validate Pump1_Temp_Monitor;
}

State Pump1_Temp_Falling NoLog {
      Hold until (!is_falling(convert(Pump1_Head_t),
        convert(Pump1_mot_T), Pump1_Temp))
        or 5
      else {
        --Pump1_Temp;
      }
   +1 Validate Pump1_Temp_Monitor;
}

depending on (1 Hz) {
  if (Pump_Status & PUMPS_ON) {
    switch (Pump1_Temp) {
      case PUMP_T_COLD:
        Pump1_SP_target = convert(PumpsSP);
        if (Pump1_SP_target < 2.0)
          Pump1_SP_target = 2.0;
        break;
      case PUMP_T_OK:
        Pump1_SP_target = convert(PumpsSP);
        break;
      case PUMP_T_WARM:
        Pump1_SP_target = convert(PumpsSP) * 0.75;
        break;
      case PUMP_T_HOT:
      case PUMP_T_WAY_HOT:
        Pump1_SP_target = 0.0;
        break;
      default: Pump1_SP_target = 0; break; /* Should never happen */
    }
  } else if (Pump1_Temp == PUMP_T_COLD) {
    Pump1_SP_target = 2.0;
  } else Pump1_SP_target = 0;
}

#----------------------------------------------
# Partition 5: Pump 1 Operation
#   Will turn on pump if below -20C
#   Will shut off pump if max temps exceeded
#----------------------------------------------
Partition

State Pump1_Off {
      > _Algo P5 1
      depending on (1 Hz) {
        if (Pump1_SP_target > 0) {
          Validate Pump1_On;
        }
        if (Pump1_Temp >= PUMP_T_HOT) {
          Pump_Status &= ~PUMP1_OK_TO_RUN;
        } else {
          Pump_Status |= PUMP1_OK_TO_RUN;
        }
      }
}

State Pump1_On NoLog {
    { double SP, newSP;
      if (Pump1_SP_target == 0) {
        Validate Pump1_Turn_Off;
      } else {
        SP = convert(Pump1_V_St);
        newSP = 0;
        if (SP > Pump1_SP_target + .01) {
          newSP = Pump1_SP_target;
        } else if (SP < Pump1_SP_target - .01) {
          newSP = SP + PUMP_SP_STEP;
          if (newSP > Pump1_SP_target)
            newSP = Pump1_SP_target;
        }
        if (newSP > 0)
          ci_sendfcmd(0, "Set Pump 1 Set Point %.2lf\n", newSP);
      }
    }

    > _Algo P5 2
 +5 { if (RPM1 == 0) { Validate Pump1_Turn_Off; } }
}

State Pump1_Turn_Off {
  { Pump_Status &= ~PUMP1_OK_TO_RUN; }
  > _Algo P5 3
  Validate Pump1_Off;
}

#----------------------------------------------
# Partition 6: Pump 2 Temperature Monitor
#----------------------------------------------
Partition

State Pump2_Temp_Monitor NoLog {
      { if (is_rising(convert(Pump2_Head_t), convert(Pump2_mot_T),
                Pump2_Temp)) {
          Validate Pump2_Temp_Rising;
        } else if (is_falling(convert(Pump2_Head_t), convert(Pump2_mot_T),
                Pump2_Temp)) {
          Validate Pump2_Temp_Falling;
        }
      }
}

State Pump2_Temp_Rising NoLog {
      Hold until (!is_rising(convert(Pump2_Head_t),
        convert(Pump2_mot_T), Pump2_Temp))
        or 5
      else {
        ++Pump2_Temp;
      }
   +1 Validate Pump2_Temp_Monitor;
}

State Pump2_Temp_Falling NoLog {
      Hold until (!is_falling(convert(Pump2_Head_t),
        convert(Pump2_mot_T), Pump2_Temp))
        or 5
      else {
        --Pump2_Temp;
      }
   +1 Validate Pump2_Temp_Monitor;
}

depending on (1 Hz) {
  if (Pump_Status & PUMPS_ON) {
    switch (Pump2_Temp) {
      case PUMP_T_COLD:
        Pump2_SP_target = convert(PumpsSP);
        if (Pump2_SP_target < 2.0)
          Pump2_SP_target = 2.0;
        break;
      case PUMP_T_OK:
        Pump2_SP_target = convert(PumpsSP);
        break;
      case PUMP_T_WARM:
        Pump2_SP_target = convert(PumpsSP) * 0.75;
        break;
      case PUMP_T_HOT:
      case PUMP_T_WAY_HOT:
        Pump2_SP_target = 0.0;
        break;
      default: Pump2_SP_target = 0; break; /* Should never happen */
    }
  } else if (Pump2_Temp == PUMP_T_COLD) {
    Pump2_SP_target = 2.0;
  } else Pump2_SP_target = 0;
}

#----------------------------------------------
# Partition 7: Pump 2 Operation
#   Will turn on pump if below -20C
#   Will shut off pump if max temps exceeded
#----------------------------------------------
Partition

State Pump2_Off {
      > _Algo P7 1
      depending on (1 Hz) {
        if (Pump2_SP_target > 0) {
          Validate Pump2_On;
        }
        if (Pump2_Temp >= PUMP_T_HOT) {
          Pump_Status &= ~PUMP2_OK_TO_RUN;
        } else {
          Pump_Status |= PUMP2_OK_TO_RUN;
        }
      }
}

State Pump2_On NoLog {
    { double SP, newSP;
      if (Pump2_SP_target == 0) {
        Validate Pump2_Turn_Off;
      } else {
        SP = convert(Pump2_V_St);
        newSP = 0;
        if (SP > Pump2_SP_target + .01) {
          newSP = Pump2_SP_target;
        } else if (SP < Pump2_SP_target - .01) {
          newSP = SP + PUMP_SP_STEP;
          if (newSP > Pump2_SP_target)
            newSP = Pump2_SP_target;
        }
        if (newSP > 0)
          ci_sendfcmd(0, "Set Pump 2 Set Point %.2lf\n", newSP);
      }
    }

    > _Algo P7 2
 +5 { if (RPM1 == 0) { Validate Pump2_Turn_Off; } }
}

State Pump2_Turn_Off {
  { Pump_Status &= ~PUMP2_OK_TO_RUN; }
  > _Algo P7 3
  Validate Pump2_Off;
}

#----------------------------------------------
# Partition 8: Cell Pressure Control
#   Note: After change tube types, need to recalibrate 'closed' position,
#         and possibly the full open position.
#   Need:
#     Pressure setpoint: Torr 16-bit 0-278
#     Proportional gain: 
#     Integral gain:
#     PINCH_MAX_DRIVE 1150
#        From fully closed drive limit to fully open drive limit
#     PINCH_FULL_OPEN 300
#        From fully closed drive limit to maximum flow. This is PINCH_HIGH_LIMIT
#     PINCH_CLOSED_STEP 100
#        From fully closed until first flow [80-120 even]
#     PINCH_CLOSED_INIT 350
#        How far to drive to ensure hard stop
#     PINCH_LOW_LIMIT 40
#        Under normal operation, do not drive below here
#        If we get here and are still above pressure, reinit
#     Speed: 107 Hz
#----------------------------------------------
Partition
State Pinch_Init {
      > _Algo P8 1
      > Command Pinch Valve Disable On
   +1 > Command Pinch Valve Disable Off
   +1 > Preset Pinch Valve Position to 500
      > Drive Pinch Valve In 450
      Hold Until (PVStat & 0x8) or 1;
      Hold Until ((PVStat & 0x8) == 0) or 4;
      > Preset Pinch Valve Position to 0
      Validate Pinch_Valve_Open;
}

State Pinch_Valve_Close {
  > _Algo P8 2
  > Stop Pinch Valve
  > Drive Pinch Valve to 50
  Hold Until (PVStep == 50 && (PVStat & 0x8) == 0) or 4;
  Validate Pinch_Valve_Closed;
}

State Pinch_Valve_Closed {
  { if (Pset > 0) { Validate Pinch_Valve_Reg_Init; }}
  depending on (Pumps_Off) {
    Validate Pinch_Valve_Open;
  }
  > _Algo P8 3
}

%{
  double Iterm = 0;
%}

State Pinch_Valve_Reg_Init {
  { Iterm = 0; }
  > _Algo P8 4
  Validate Pinch_Valve_Reg;
}

State Pinch_Valve_Reg {
  { if (Pset < 0) { Validate Pinch_Valve_Open; } }
  depending on (Pumps_Off) { Validate Pinch_Valve_Open; }
  { double err, Pterm, PVst;
    int PVsti;
    err = (convert(Cell_P) - Pset)/convert(Amb_P);
    Pterm = Pgain * err;
    Iterm += Igain * err;
    if (Iterm > 300-80) Iterm = 300-80;
    PVst = Pterm + Iterm + 80;
    if (PVst > 300) PVst = 300;
    if (PVst < 40) PVst = 40;
    PVsti = floor(PVst+0.5);
    if (PVsti != PVStep) {
      ci_sendfcmd(2, "Drive Pinch Valve to %d\n", PVsti);
    }
  }
  > _Algo P8 5
}

State Pinch_Valve_Open {
  > _Algo P8 6
  > Scan Pinch Valve to 300 by 25
  Hold Until (PVStep == 300 && (PVStat & 0x8) == 0) or 5;
  Validate Pinch_Valve_Opened;
}

State Pinch_Valve_Opened {
  depending on (Pumps_Running) {
    if (Pset >= 0) {
      Validate Pinch_Valve_Reg_Init;
    }
  }
  > _Algo P8 7
}

State Pinch_Idle {
  > _Algo P8 8
}

#----------------------------------------------------------------
# Partition 9: Laser Control 3.3um QCL ICOS
#----------------------------------------------------------------
Partition

%{
  int num_QCL_recovers = 0;
  #define LOW_CURRENT 0.02
  #define QCL_TEMP_LIMIT 0.75 /* 25C */
  /* We don't have a commandable LTE setpoint, so we'll use the
     one-variable version. */
  /* #define QCL_TEMP_OK(x,y) (x > QCL_TEMP_LIMIT && x > y) */
  #define QCL_TEMP_OK(x) (x > QCL_TEMP_LIMIT)
  #define LPV_TEMP_OK(x,y) (x > (y-0.1))
%}
# Laser Starting and Stopping

State QCL_Init {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
  +1  > SSP Stop
# The following statement was to allow for a lab mode that does not start automatically
# We have no I/O Switches, so we'll probably need to just key off of Amb_P
#     Hold until ((IOSwS&3) == 3);
      Hold until (convert(Amb_P) < 500);
  +1  Validate QCLI_Stop;
      Hold until valid (QCLI_Idle);
      Validate QCL_Idle;
}

State QCL_Idle {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    Validate QCLI_Idle;
}

State QCL_Start {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    Hold until ( SSP_Status == SSP_STATUS_READY )
    or 2 else {
      nl_error( 2, "SSP Not Ready in QCL_Start" );
      Validate QCL_SSP_Recover;
    }
    Hold until ( QCL_TEMP_OK(convert(ILTE3R3T)) ) or 20
    else Validate QCL_Out_TSpec;
    Hold until valid (QCLI_Idle) or 2
    else Validate QCLI_Stop;
    Hold until valid (QCLI_Idle);
 +1 > SSP Start
    Hold until ( SSP_Status == SSP_STATUS_ARMED )
    or 20 else {
      nl_error( 2, "Not Armed in QCL_Start" );
      Validate QCL_SSP_Recover;
    }
    Validate QCLI_Run;
    Hold until (SSP_Status == SSP_STATUS_TRIG &&
                convert(Laser_I) > LOW_CURRENT) or 20
    else Validate QCL_SSP_Recover;
    { num_QCL_recovers = 0; }
    Validate QCL_Watch;
}

State QCL_Watch NoLog {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    { if ( SSP_Status == SSP_STATUS_READY ) {
        nl_error( 2, "SSP Went Ready Spontaneously" );
        Validate QCL_SSP_Recover;
      }
    }
    hold until ( SSP_Status != SSP_STATUS_TRIG ||
         !QCL_TEMP_OK(convert(ILTE3R3T)) ||
         convert(Laser_I) <= LOW_CURRENT );
    hold until ( SSP_Status == SSP_STATUS_TRIG &&
         QCL_TEMP_OK(convert(ILTE3R3T)) &&
         convert(Laser_I) >= LOW_CURRENT) or 2
    else Validate QCL_Watch_Recover;
    Validate QCL_Watch;
}

State QCL_Watch_Recover NoLog {
  { if (!QCL_TEMP_OK(convert(ILTE3R3T)))
      Validate QCL_Out_TSpec;
    else if (convert(Laser_I) <= LOW_CURRENT)
      Validate QCL_Out_Spec;
    else if (SSP_Status != SSP_STATUS_TRIG)
      Validate QCL_SSP_Recover;
    else Validate QCL_Watch;
  }
}

State QCL_SSP_Recover NoLog {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    { if ( ++num_QCL_recovers > 20 ) {
        nl_error( 2, "Exceeded num_QCL_recovers. Trying reset" );
        num_QCL_recovers = 0;
        Validate QCL_SSP_QCLI_Reset;
      }
    }
    > SSP Stop
 +2 Validate QCLI_Stop;
    Hold until ( SSP_Status == SSP_STATUS_READY ) or 10
    else Validate QCL_SSP_Not_Talking;
    Hold until valid (QCLI_Idle);
    Validate QCL_Start;
}

State QCL_SSP_QCLI_Reset {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    Validate QCLI_Stop_Reset;
    depending on (QCLI_Fail) { Validate QCL_Fail; }
    depending on (QCLI_Idle) { Validate QCL_Start; }
}

State QCL_SSP_Not_Talking {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    > SSP Stop
    { if ( ++num_QCL_recovers > 20 ) Validate QCL_SSP_Fail; }
    Hold until ( SSP_Status == SSP_STATUS_READY ) or 10
    else Validate QCL_SSP_Not_Talking;
    Validate QCL_SSP_Recover;
}

State QCL_SSP_Fail {
    { nl_error( 2, "SSP Has Failed" ); }
    depending on (Shutdown) { Validate QCL_Is_Shutdown; }
}

State QCL_Fail {
    { nl_error( 2, "QCLI Has Failed" ); }
    > SSP Stop
    depending on (Shutdown) { Validate QCL_Is_Shutdown; }
}

State QCL_Shutdown {
    > SSP Stop
 +1 Validate QCLI_Stop;
    Hold until valid (QCLI_Idle) or 20;
    > Log Laser QCL Has Shutdown
    Validate QCL_Is_Shutdown;
}

State QCL_Is_Shutdown {}

State QCL_Out_Spec {
    > SSP Stop
    Validate QCLI_Stop;
    Hold until Valid (QCLI_Idle);
    Validate QCL_Start;
}

State QCL_Out_TSpec {
    > SSP Stop
    Validate QCLI_Stop;
    Hold until valid (QCLI_Idle);
    Hold until ( QCL_TEMP_OK(convert(ILTE3R3T)));
    # Do we need to check the environment temp here?
    # && LPV_TEMP_OK(convert(LPVCT),convert(LPVTSt)) );
 +10 Validate QCL_Start;
}

State QCL_Stop {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    > SSP Stop
 +1 Validate QCLI_Stop;
    Hold until valid (QCLI_Idle);
    Validate QCL_Idle;
}

#Running Waveforms

State QCL_SelectICOSandRun {
      Depending on (Shutdown) { Validate QCL_Shutdown; }
      > SSP Stop
      Hold until ( SSP_Status == SSP_STATUS_READY ) or 5
      else { nl_error( 2, "Not Ready in QCL_SelectICOSandRun" ); }
      Hold until valid (QCLI_Idle) or 2
      else Validate QCLI_Stop;
      Hold until valid (QCLI_Idle);
#  +1 > Set Laser TEC Temp Setpoint 1.1
#  +1 > Laser TEC On
      Hold until ( QCL_TEMP_OK(convert(ILTE3R3T)) );
 +10 > Select QCLI Waveform I_310_355_5ms1Hz
  +3 Validate QCL_Start;
}

State QCL_SelectRingandRun {
      Depending on (Shutdown) { Validate QCL_Shutdown; }
      > SSP Stop
      Hold until ( SSP_Status == SSP_STATUS_READY ) or 5
      else { nl_error( 2, "SSP Not Ready in QCL_SelectRingandRun" ); }
      Hold until valid (QCLI_Idle) or 2
      else Validate QCLI_Stop;
      Hold until valid (QCLI_Idle);
#  +1 > Set Laser TEC Temp Setpoint 1.1
#  +1 > Laser TEC On
      Hold until ( QCL_TEMP_OK(convert(ILTE3R3T)) );
   +1 > Select QCLI Waveform RD_310_355_50MHz
#  +1 > SSP Set NSample 3500
   +2 Validate QCL_Start;
}

#----------------------------------------------------------------
# Partition 10: QCLI Control
#----------------------------------------------------------------
Partition

%{
  int num_QCLI_recovers = 0;
%}

State QCLI_Idle {}

State QCLI_Run {
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else > QCLI clear errors
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else Validate QCLI_Start_Reset;
    > QCLI Run
    { num_QCLI_recovers = 0;
      Validate QCLI_Running;
    }
}

State QCLI_Running {
}

State QCLI_Start_Reset {
    { if ( ++num_QCLI_recovers > 20 ) {
        nl_error( 2,"Exceeded num_QCLI_recovers in QCLI_Start_Reset" );
        Validate QCLI_Fail;
      }
    }
    > Command QCLI Reset On
 +1 > Command QCLI Reset Off
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else Validate QCLI_Start_Reset;
    { num_QCLI_recovers = 0;
      ci_sendfcmd( 0, "Select QCLI Waveform Number %d\n", QCLI_Wave );
      Validate QCLI_Run;
    }
}

State QCLI_Stop {
      > QCLI Stop
      Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
      else > QCLI clear errors
      Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
      else Validate QCLI_Stop_Reset;
      Validate QCLI_Idle;
}

State QCLI_Stop_Reset {
    { if ( ++num_QCLI_recovers > 20 ) {
        nl_error( 2,"Exceeded num_QCLI_recovers in QCLI_Stop_Reset" );
        Validate QCLI_Fail;
      }
    }
    > Command QCLI Reset On
 +1 > Command QCLI Reset Off
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else > QCLI clear errors
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else Validate QCLI_Stop_Reset;
    { num_QCLI_recovers = 0;
      ci_sendfcmd( 0, "Select QCLI Waveform Number %d\n", QCLI_Wave );
      Validate QCLI_Idle;
    }
}

State QCLI_Fail {
    { nl_error( 2, "QCLI Not Responding" );
      num_QCLI_recovers = 0;
    }
#+2:00 Validate QCLI_Stop_Reset;
}

State QCLI_Shutdown {}

#----------------------------------------------
# Partition 11: Calibration
#----------------------------------------------
Partition

State Calibrate_Idle {
    > Command Gas Deck Valve Off
    > Command Cal Gas Valve Off
    depending on (OFF_GROUND) { Validate Calibrate_Heat; }
    depending on (STRATOSPHERE) { Validate Calibrate_Heat; }
}

State Calibrate_Heat {
    depending on (AT_FLOAT) { Validate Calibrate_Idle; }
    depending on (VALVEDOWN) { Validate Calibrate_Idle; }
    depending on (VALVEDOWNPAUSE) { Validate Calibrate_Idle; }
    depending on (TERMINATE) { Validate Calibrate_Idle; }
          > Command Gas Deck Valve Off
          > Command Cal Gas Valve Off
   +10:00 > Command Cal Gas Valve On
    +1:00 > Command Cal Gas Valve Off
          Validate Calibrate_Heat;
}

%{
  PSIG GasHP_Start;
%}
State Calibrate {
    depending on (TERMINATE) { Validate Calibrate_Idle; }
      > Command Cal Gas Valve On
      > Command Gas Deck Valve On
      { GasHP_Start == convert(GasHP); }
  +60 { if (convert(GasHP) < GasHP_Start - 15.0) {
          Validate Calibrate_Idle;
        }
      }
   +2 > Command Cal Gas Valve Off
      > Command Gas Deck Valve Off
   +1 Validate Calibrate;
}

#----------------------------------------------
# Partition 12: Pinch Valve ReInit
#----------------------------------------------
Partition

%{
  PumpSet_t old_SP;
%}
State Pinch_ReInit_Idle {
  depending on (Record) {
    if (SWStat == SWS_PINCH_REINIT) {
      old_SP = PumpsSP;
      Validate Pinch_ReInit;
    }
  }
}

State Pinch_ReInit {
      > Pumps Set Point 0
      Hold until valid (Pinch_Valve_Opened) or 10;
      Validate Pinch_Init;
      Hold until valid (Pinch_Valve_Opened);
   +3 { ci_sendfcmd(0, "Pumps Set Point %d\n", old_SP);
        Validate Pinch_ReInit_Idle;
      }
}

#----------------------------------------------
# Partition 13: Pump SetPoint Adjustment
#----------------------------------------------
Partition

State Pump_Adj_Idle {
}

State Pump_Adj_Inc {
  { double SP;
    SP = convert(PumpsSP) + 0.5;
    if (SP > 5) SP = 5;
    ci_sendfcmd(0, "Pumps Set Point %.2lf\n", SP);
    Validate Pump_Adj_Idle;
  }
}

State Pump_Adj_Dec {
  { double SP;
    SP = convert(PumpsSP) - 0.5;
    if (SP < 0) SP = 0;
    ci_sendfcmd(0, "Pumps Set Point %.2lf\n", SP);
    Validate Pump_Adj_Idle;
  }
}

#----------------------------------------------
# Partition 14: Inlet SetPoint Adjustment
#----------------------------------------------
Partition

State Inlet_Adj_Idle {
}

State Inlet_Adj_Inc {
  { double SP;
    SP = convert(InletTSt) + 0.1;
    if (SP > 3) SP = 3;
    ci_sendfcmd(0, "Inlet Set Point %.2lf\n", SP);
    Validate Inlet_Adj_Idle;
  }
}

State Inlet_Adj_Dec {
  { double SP;
    SP = convert(InletTSt) - 0.1;
    if (SP < 0) SP = 0;
    ci_sendfcmd(0, "Inlet Set Point %.2lf\n", SP);
    Validate Inlet_Adj_Idle;
  }
}

