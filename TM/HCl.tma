State Init {
  > Telemetry Start
  Validate Idle;
}

State Idle {
}

State Calibrate {
        > Select QCLI Waveform I_340_350
    +2  > SSP Start
    +2  > QCLI Run
 +2:00  > SSP Stop
    +1  > QCLI Stop
#   +3  > Select QCLI Waveform I_342_347
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop
#   +3  > Select QCLI Waveform I_344_346
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop

#   +3  > Select QCLI Waveform I_340_350
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop
#   +3  > Select QCLI Waveform I_342_347
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop
#   +3  > Select QCLI Waveform I_344_346
#   +2  > SSP Start
#   +2  > QCLI Run
#+2:00  > SSP Stop
#   +1  > QCLI Stop

        Validate RingDown_Survey;
}

State RingDown_Survey {
    +3  > Select QCLI Waveform RD_350_10MHz
    +2  > SSP Start
    +2  > QCLI Run
 +1:00  > SSP Stop
    +1  > QCLI Stop

    +3  > Select QCLI Waveform RD_300_50MHz
    +2  > SSP Start
    +2  > QCLI Run
 +1:00  > SSP Stop
    +1  > QCLI Stop

    +3  > Select QCLI Waveform RD_250_50MHz
    +2  > SSP Start
    +2  > QCLI Run
 +1:00  > SSP Stop
    +1  > QCLI Stop

        Validate Idle;
}

State PumpCycle {
  > Set Pumps Set Point 1.0
      +1 Hold until (SWStat == SWS_TIME_WARP) or 9:59;
      +1 > SWStat Set 30
      +1 Hold until (SWStat == SWS_TIME_WARP) or 59;
      +1 > SWStat Set 0
   Validate PumpCycleLoop;
}

State PumpCycleLoop {
  { if (Pump1_V_St == 0) Validate Idle; }
     +1 { ci_sendfcmd(0, "Set Pumps Set Point %.2lf\n",
            convert(Pump1_V_St)+0.25); }
     +1 Hold until (SWStat == SWS_TIME_WARP) or 9:59;
     +1 > SWStat Set 30
  +1:00 > SWStat Set 0
        Validate PumpCycleLoop;
}

Partition
%{
  #define HEAD_MAX_T 80.0
  #define ELEC_MAX_T 58.0
%}

State Pump_Off {
      > Set Pumps Set Point 0
   +2 { if (Pump1_V_St > 0 || Pump2_V_St > 0)
          Validate Pump_On;
      }
}

State Pump_On NoLog {
    Hold until (convert(Pump1_Head_T) > HEAD_MAX_T ||
          convert(Pump2_Head_T) > HEAD_MAX_T ||
          convert(Pump1_mot_T) > ELEC_MAX_T ||
          convert(Pump2_mot_T) > ELEC_MAX_T);
    Hold until (convert(Pump1_Head_T) <= HEAD_MAX_T &&
          convert(Pump2_Head_T) <= HEAD_MAX_T &&
          convert(Pump1_mot_T) <= ELEC_MAX_T &&
          convert(Pump2_mot_T) <= ELEC_MAX_T)
          or 5
    else Validate Pump_Over_Temp;
    +1 Validate Pump_On;
}

State Pump_Over_Temp {
  Validate Pump_Off;
}
